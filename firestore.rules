rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Learning content is read-only for authenticated users
    match /content/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write content (via Firebase Admin SDK)
    }
    
    // Quizzes are read-only for authenticated users
    match /quizzes/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write quizzes (via Firebase Admin SDK)
    }
    
    // Categories are read-only for authenticated users
    match /categories/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write categories (via Firebase Admin SDK)
    }
    
    // User activities - users can only read/write their own activities
    match /activities/{document} {
      allow read, write: if request.auth != null && 
                         request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
    }
    
    // App settings are read-only for all authenticated users
    match /settings/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write settings (via Firebase Admin SDK)
    }

    // Chat sessions - users can only access their own chats
    match /chats/{chatId} {
      allow read, write: if request.auth != null &&
                         request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
                   request.auth.uid == request.resource.data.userId;
    }
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'createdAt', 'lastLoginAt', 'progress', 'preferences']) &&
             request.resource.data.email is string &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.lastLoginAt is timestamp &&
             request.resource.data.progress is map &&
             request.resource.data.preferences is map;
    }
    
    function isValidActivity() {
      return request.resource.data.keys().hasAll(['userId', 'activityType', 'contentId', 'contentTitle', 'timestamp']) &&
             request.resource.data.userId is string &&
             request.resource.data.activityType is string &&
             request.resource.data.contentId is string &&
             request.resource.data.contentTitle is string &&
             request.resource.data.timestamp is timestamp;
    }
  }
}
